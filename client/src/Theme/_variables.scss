$black: #000000; // black
$white: #ffffff; // white

$blackish: #111;

// light theme
$lightPrimary: #d0e1f1;
$lightSecondary: #b0bdca;
$lightTertiary: #909aa3;

// dark theme
$darkPrimary: #2f2f2f;
$darkSecondary: #585c5f;
$darkTertiary: #a9adb2;

$themes: (
  dark: (
    'text-color': $darkTertiary,
    'bg-color': $darkPrimary,
  ),
  light: (
    'text-color': $lightTertiary,
    'bg-color': $lightPrimary,
  ),
);

$theme-map: null;
@mixin theme() {
  @each $theme, $map in $themes {
    // $theme: darkTheme, lightTheme
    // $map: ('text-color': ..., 'bg-color': ...)

    // make the $map globally accessible, so that theme-get() can access it
    $theme-map: $map !global;

    // make a class for each theme using interpolation -> #{}
    // use & for making the theme class ancestor of the class
    // from which you use @include theme() {...}
    .#{$theme} & {
      @content; // the content inside @include theme() {...}
    }
  }
  // no use of the variable $theme-map now
  $theme-map: null !global;
}

@function theme-get($key) {
  @return map-get($theme-map, $key);
}
