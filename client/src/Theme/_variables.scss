$mobile-width: 768px;

$black: #000000; // black
$white: #ffffff; // white

$blackish: #111;

// light theme
$lightPrimary: #fdf6f0;
$lightSecondary: #f8e2cf;
$lightTertiary: #f6b087;
$lightShadow: rgba(255, 255, 255, 0.301);

// dark theme
$darkPrimary: #33363b;
$darkSecondary: #585c5f;
$darkTertiary: #f5f6f7;
$darkShadow: rgba(100, 100, 111, 0.2);

$themes: (
  dark: (
    'primary': $darkPrimary,
    'secondary': $darkSecondary,
    'tertiary': $darkTertiary,
    'shadow': $darkShadow,
    'text-color': $darkTertiary,
    'bg-color': $darkPrimary,
  ),
  light: (
    'primary': $lightPrimary,
    'secondary': $lightSecondary,
    'tertiary': $lightTertiary,
    'shadow': $lightShadow,
    'text-color': $lightTertiary,
    'bg-color': $lightPrimary,
  ),
);

$theme-map: null;
@mixin theme() {
  @each $theme, $map in $themes {
    // $theme: darkTheme, lightTheme
    // $map: ('text-color': ..., 'bg-color': ...)

    // make the $map globally accessible, so that theme-get() can access it
    $theme-map: $map !global;

    // make a class for each theme using interpolation -> #{}
    // use & for making the theme class ancestor of the class
    // from which you use @include theme() {...}
    .#{$theme} & {
      @content; // the content inside @include theme() {...}
    }
  }
  // no use of the variable $theme-map now
  $theme-map: null !global;
}

@function theme-get($key) {
  @return map-get($theme-map, $key);
}
